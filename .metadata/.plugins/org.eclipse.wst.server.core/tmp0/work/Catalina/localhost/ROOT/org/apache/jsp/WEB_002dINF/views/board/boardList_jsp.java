/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.71
 * Generated at: 2024-10-10 11:44:35 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.board;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class boardList_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(7);
    _jspx_dependants.put("jar:file:/D:/shlim/springBoard/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/springBoard/WEB-INF/lib/jstl-1.2.jar!/META-INF/fn.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("jar:file:/D:/shlim/springBoard/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/springBoard/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("jar:file:/D:/shlim/springBoard/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/springBoard/WEB-INF/lib/spring-webmvc-3.1.1.RELEASE.jar!/META-INF/spring.tld", Long.valueOf(1329370132000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1727679338000L));
    _jspx_dependants.put("/WEB-INF/lib/spring-webmvc-3.1.1.RELEASE.jar", Long.valueOf(1727679338000L));
    _jspx_dependants.put("jar:file:/D:/shlim/springBoard/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/springBoard/WEB-INF/lib/jstl-1.2.jar!/META-INF/fmt.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/views/common/common.jsp", Long.valueOf(1728547642000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fchoose;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fotherwise;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fchoose = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fotherwise = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fchoose.release();
    _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.release();
    _005fjspx_005ftagPool_005fc_005fotherwise.release();
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  \r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title></title>\r\n");
      out.write("</head>\r\n");
      out.write("<script src=\"/resources/js/jquery-1.10.2.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("	var $j = jQuery.noConflict();\r\n");
      out.write("</script>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("\r\n");
      out.write("<title>list</title>\r\n");
      out.write("</head>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\r\n");
      out.write("	$j(document).ready(function(){\r\n");
      out.write("        \r\n");
      out.write("		$j(\"#allCheck\").on(\"click\", function(){\r\n");
      out.write("			\r\n");
      out.write("			//체크여부 확인\r\n");
      out.write("		     if ($j(this).is(\":checked\")) {\r\n");
      out.write("	        // 체크된 경우: name=\"boardTypeList\"인 체크박스들의 id 값을 selectedValues 배열에 추가\r\n");
      out.write("	        $j(\"input[name='boardTypeList']\").each(function() {\r\n");
      out.write("	            let id = $j(this).attr('id');\r\n");
      out.write("	            // 중복 체크: 이미 배열에 없는 경우만 추가\r\n");
      out.write("	            if (!selectedValues.includes(id) && id !== \"allCheck\") {\r\n");
      out.write("	                selectedValues.push(id);\r\n");
      out.write("	            }\r\n");
      out.write("	        });\r\n");
      out.write("		    } else {\r\n");
      out.write("		        // 전체선택 체크박스가 해제된 경우: 배열에서 모든 id 값 제거\r\n");
      out.write("		        $j(\"input[name='boardTypeList']\").each(function() {\r\n");
      out.write("		            const id = $j(this).attr('id');\r\n");
      out.write("		            const index = selectedValues.indexOf(id);\r\n");
      out.write("		            if (index > -1) {\r\n");
      out.write("		                selectedValues.splice(index, 1);  // 배열에서 해당 id 제거\r\n");
      out.write("		            }\r\n");
      out.write("		        });\r\n");
      out.write("		    }\r\n");
      out.write("            \r\n");
      out.write("            \r\n");
      out.write("			$j(\"input[name='boardTypeList']\").prop(\"checked\", $j(this).is(\":checked\"));	\r\n");
      out.write("            //alert(\"id: \" + $j(this).attr('id'));\r\n");
      out.write("            selectedValues.push($j(this).attr('id'));\r\n");
      out.write("            //alert(\"selectedValues: \" +  selectedValues);\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("		//체크된 갯수가 selectedValues.length 보다 작을시 전체 선택 표시 없애기  \r\n");
      out.write("		const ckAll = document.querySelector(\".ck-all\");\r\n");
      out.write("		const ckArr = document.querySelectorAll(\".ck\"); \r\n");
      out.write("		//$('input:checkbox[name=\"boardTypeList\"]').length//체크박스 전체 갯수 \r\n");
      out.write("\r\n");
      out.write("	\r\n");
      out.write("		ckAll.addEventListener(\"click\", () =>{\r\n");
      out.write("			\r\n");
      out.write("			ckArr.forEach(ck => {\r\n");
      out.write("				ck.checked = ckAll.checked;\r\n");
      out.write("			})\r\n");
      out.write("			\r\n");
      out.write("		})\r\n");
      out.write("		\r\n");
      out.write("		ckArr.forEach(ck =>{\r\n");
      out.write("			ck.addEventListener(\"click\",() =>{\r\n");
      out.write("				\r\n");
      out.write("				let cnt = 0;\r\n");
      out.write("				\r\n");
      out.write("				ckArr.forEach(ck =>{\r\n");
      out.write("					if(ck.checked == true){\r\n");
      out.write("						\r\n");
      out.write("						cnt++;\r\n");
      out.write("					}\r\n");
      out.write("				})\r\n");
      out.write("				\r\n");
      out.write("				if(cnt == ckArr.length){\r\n");
      out.write("					//ckArr.length // ('input:checkbox[name=\"boardTypeList\"]')\r\n");
      out.write("					ckAll.checked = true;\r\n");
      out.write("				} else {\r\n");
      out.write("					ckAll.checked = false;\r\n");
      out.write("				}\r\n");
      out.write("				\r\n");
      out.write("			})\r\n");
      out.write("		})\r\n");
      out.write("\r\n");
      out.write("		\r\n");
      out.write("		var selectedValues = [];//선택된 체크박스 id값을 넣은 배열\r\n");
      out.write("		\r\n");
      out.write("		$j(\"input[name='boardTypeList']:checked\").each(function() {\r\n");
      out.write("			//selectedValues = [];\r\n");
      out.write("			\r\n");
      out.write("	        selectedValues.push($j(this).attr('id'));  // (체크된) 체크박스의 id 값 가져오기 (codeName)\r\n");
      out.write("	        \r\n");
      out.write("	    });\r\n");
      out.write("		\r\n");
      out.write("		$j(\"input[name='boardTypeList']\").on(\"click\", function(){//각 체크박스 선택했을시 id값\r\n");
      out.write("			let value = $j(this).val();\r\n");
      out.write("			//alert(\"value값은: \" + value); \r\n");
      out.write("			\r\n");
      out.write("			let id = $j(this).attr('id');\r\n");
      out.write("		    //alert(\"id 값은: \" + id);\r\n");
      out.write("		    \r\n");
      out.write("		    //체크여부 확인\r\n");
      out.write("		    if($j(this).is(\":checked\")){\r\n");
      out.write("		    	selectedValues.push($j(this).attr('id'));//체크시 추가 아닐시 배열에서 뺌 \r\n");
      out.write("		    } else {\r\n");
      out.write("		    	const index = selectedValues.indexOf(id);\r\n");
      out.write("		    	\r\n");
      out.write("		    	if (index > -1) {\r\n");
      out.write("		            selectedValues.splice(index, 1);  // 배열에서 해당 id 제거\r\n");
      out.write("		        }\r\n");
      out.write("		    }\r\n");
      out.write("\r\n");
      out.write("	        //alert(\"selectedValues: \" +  selectedValues);\r\n");
      out.write("			\r\n");
      out.write("		});\r\n");
      out.write("	\r\n");
      out.write("		//폼메서드 없이 아작스로 바꾼다면? \r\n");
      out.write("		$j(\"#searchBtn\").on(\"click\", function(){\r\n");
      out.write("			\r\n");
      out.write("			\r\n");
      out.write("			 // 선택된 체크박스의 값\r\n");
      out.write("			 let selectedBoardTypes = [];\r\n");
      out.write("\r\n");
      out.write("			 $j(\"input[name='boardTypeList']:checked\").each(function() {\r\n");
      out.write("					\r\n");
      out.write("			   // (체크된) 체크박스의 id 값 가져오기 (codeName)\r\n");
      out.write("			      let val = $j(this).val();\r\n");
      out.write("		          if (val !== \"\") {  // 빈 값이 아닐 때만 추가\r\n");
      out.write("		            selectedBoardTypes.push(val);\r\n");
      out.write("		          }\r\n");
      out.write("			  });\r\n");
      out.write("			\r\n");
      out.write("			 alert(\"selectedBoardTypes \" + selectedBoardTypes);\r\n");
      out.write("			 \r\n");
      out.write("			 let url = \"/board/boardList.do?\";\r\n");
      out.write("			 \r\n");
      out.write("			\r\n");
      out.write("			 if (selectedBoardTypes.length > 0) {\r\n");
      out.write("			   \r\n");
      out.write("			     url = \"/board/boardAjaxList.do?boardTypeList=\" + selectedBoardTypes;\r\n");
      out.write("			  } else {\r\n");
      out.write("				  location.href=\"/board/boardList.do\";\r\n");
      out.write("			  }\r\n");
      out.write("			 \r\n");
      out.write("			 //아작스 요청 \r\n");
      out.write("			 $j.ajax({\r\n");
      out.write("				 url: url,\r\n");
      out.write("				 dataType: \"json\",\r\n");
      out.write("				 type: \"GET\",\r\n");
      out.write("				 //data : {boardTypeList : selectedBoardTypes},//일반적으로 post 요청에 필요//// 체크박스의 선택된 값들\r\n");
      out.write("				 success: function(data, textStatus, jqXHR)\r\n");
      out.write("				 {//성공시 뭘불러올지? \r\n");
      out.write("					let html = '';\r\n");
      out.write("				 	let html2 = '';\r\n");
      out.write("	 				//alert(\"성공\" + textStatus + jqXHR);	\r\n");
      out.write("	 				//alert(\"메세지:\"+data.success);\r\n");
      out.write("	 				\r\n");
      out.write("	 				console.log(\"토탈카운트\" + data.totalCnt);\r\n");
      out.write("	 				console.log(\"페이지\" + data.pageNo);\r\n");
      out.write("	 				console.log(\"보드리스트\" + data.boardList);\r\n");
      out.write("	 				console.log(\"코드네임리스트\" + data.codeNameList);\r\n");
      out.write("	 				//location.href = \"/board/boardList.do?boardTypeList=\" + selectedBoardTypes;//리로드하는 방식\r\n");
      out.write("\r\n");
      out.write("	 				//토탈카운트\r\n");
      out.write("				 	$j(\"#totalCnt\").text('total : ' + data.totalCnt);\r\n");
      out.write("				 	\r\n");
      out.write("				 	//보드리스트\r\n");
      out.write("					if(data.boardList != null){\r\n");
      out.write("						\r\n");
      out.write("						$j(\"#boardTable\").html('');//기존 뷰에 뿌려진 데이터 날리기\r\n");
      out.write("						\r\n");
      out.write("						html += `<tr id=\"tableHeader\">\r\n");
      out.write("			                <td width=\"80\" align=\"center\">Type</td>\r\n");
      out.write("			                <td width=\"40\" align=\"center\">No</td>\r\n");
      out.write("			                <td width=\"300\" align=\"center\">Title</td>\r\n");
      out.write("			                <td width=\"75\" align=\"center\"></td>\r\n");
      out.write("			            </tr>`;\r\n");
      out.write("						/*\r\n");
      out.write("						data.boardList.forEach((item)=>{\r\n");
      out.write("							//html+=boardTableTr(item);\r\n");
      out.write("							\r\n");
      out.write("							\r\n");
      out.write("							console.log(\"item\" + item);\r\n");
      out.write("						});*/\r\n");
      out.write("					\r\n");
      out.write("					data.boardList.forEach(function(item){\r\n");
      out.write("						 	console.log(\"item:\", item);  \r\n");
      out.write("						    console.log(\"item.codeName:\", item.codeName);\r\n");
      out.write("						    console.log(\"item.boardNum:\", item.boardNum);\r\n");
      out.write("						    console.log(\"item.boardTitle:\", item.boardTitle);\r\n");
      out.write("						    console.log(\"item.boardType:\", item.boardType);\r\n");
      out.write("						    console.log(\"item.pageNo:\", item.pageNo);		\r\n");
      out.write("							html+=  `<tr>\r\n");
      out.write("				                        <td align=\"center\">` +item.codeName+ `</td>\r\n");
      out.write("				                        <td>` +item.boardNum+ `</td>\r\n");
      out.write("				                        <td>\r\n");
      out.write("				                            <a href=\"/board/` +item.boardType + `/` + item.boardNum + `/boardView.do?pageNo=");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageNo}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\">` + item.boardTitle + `</a>\r\n");
      out.write("				                        </td>\r\n");
      out.write("				                        <td>\r\n");
      out.write("				                            <button class=\"deleteBtn\" data-board-num=` + item.boardNum + ` data-board-type= ` + item.boardType + `>삭제 버튼</button>\r\n");
      out.write("				                        </td>\r\n");
      out.write("				                    </tr>`;\r\n");
      out.write("					});		\r\n");
      out.write("				\r\n");
      out.write("			 			$j(\"#boardTable\").html(html);\r\n");
      out.write("	\r\n");
      out.write("						console.log(\"출력화면\" + html);\r\n");
      out.write("						\r\n");
      out.write("						$j(\"#boardTable\").on(\"click\", \".deleteBtn\", function() {\r\n");
      out.write("						    let boardNum = $j(this).data(\"board-num\");\r\n");
      out.write("						    let boardType = $j(this).data(\"board-type\");\r\n");
      out.write("\r\n");
      out.write("						    var result = confirm(\"삭제 하시겠습니까?\");\r\n");
      out.write("						    if (!result) {\r\n");
      out.write("						        return;\r\n");
      out.write("						    }\r\n");
      out.write("						    \r\n");
      out.write("						    // AJAX 삭제 요청\r\n");
      out.write("						    $j.ajax({\r\n");
      out.write("						        url: '/board/boardDeleteAction.do',\r\n");
      out.write("						        type: 'GET',\r\n");
      out.write("						        data: { boardNum: boardNum, boardType: boardType },\r\n");
      out.write("						        success: function(data) {\r\n");
      out.write("						            if (data.success) {\r\n");
      out.write("						                alert(\"게시글이 삭제되었습니다.\");\r\n");
      out.write("						                // 해당 게시글을 리스트에서 제거\r\n");
      out.write("						                $j(this).closest('tr').remove();\r\n");
      out.write("						            } else {\r\n");
      out.write("						                alert(\"삭제 실패\");\r\n");
      out.write("						            }\r\n");
      out.write("						        },\r\n");
      out.write("						        error: function() {\r\n");
      out.write("						            alert(\"오류 발생\");\r\n");
      out.write("						        }\r\n");
      out.write("						    });\r\n");
      out.write("						});\r\n");
      out.write("	\r\n");
      out.write("					} else {\r\n");
      out.write("						$j(\"#boardTable\").html('<tr><td colspan=\"4\" align=\"center\">조회 결과가 없습니다.</td></tr>');\r\n");
      out.write("						$j(\"#boardTable\").html(html);\r\n");
      out.write("				        $j(\"#totalCnt\").text('total : 0');\r\n");
      out.write("					}	\r\n");
      out.write("					$j(\"#boardTable\").on(\"click\", \".deleteBtn\", function() {\r\n");
      out.write("			            const boardNum = $j(this).data(\"board-num\");\r\n");
      out.write("			            const boardType = $j(this).data(\"board-type\");\r\n");
      out.write("\r\n");
      out.write("			            console.log(\"삭제할 게시물 번호:\", boardNum);\r\n");
      out.write("			            console.log(\"게시물 타입:\", boardType);\r\n");
      out.write("\r\n");
      out.write("			        });\r\n");
      out.write("				\r\n");
      out.write("				 },\r\n");
      out.write("				 error: function(jqXHR, textStatus, errorThrown)\r\n");
      out.write("				{\r\n");
      out.write("					 alert(\"실패\" + textStatus +\", \" + errorThrown);	\r\n");
      out.write("					 console.log(\"실패\" + textStatus + \",\" + errorThrown);\r\n");
      out.write("					 alert(\"상태 코드:\"+ jqXHR.status);\r\n");
      out.write("					 console.log(\"상태 코드:\"+ jqXHR.status);\r\n");
      out.write("					alert(\"응답 텍스트:\", jqXHR.responseText);\r\n");
      out.write("					console.log(\"응답 텍스트:\"+ jqXHR.responseText);\r\n");
      out.write("					alert(\"AJAX 요청 URL:\"+ url);\r\n");
      out.write("					console.log(\"AJAX 요청 URL:\"+ url);\r\n");
      out.write("					alert(\"선택된 보드 타입:\"+ selectedBoardTypes);\r\n");
      out.write("					console.log(\"선택된 보드 타입:\"+ selectedBoardTypes);\r\n");
      out.write("				}\r\n");
      out.write("				 \r\n");
      out.write("				 \r\n");
      out.write("			 });\r\n");
      out.write("			 \r\n");
      out.write("		});\r\n");
      out.write("\r\n");
      out.write("		\r\n");
      out.write("		$j(\".deleteBtn\").on(\"click\",function(){\r\n");
      out.write("			\r\n");
      out.write("			let boardNum = $j(this).data(\"board-num\");\r\n");
      out.write("			let boardType = $j(this).data(\"board-type\");\r\n");
      out.write("			//alert(\"boardNum :\" + boardNum);\r\n");
      out.write("			\r\n");
      out.write("			var result = confirm(\"삭제 하시겠습니까?\");\r\n");
      out.write("	\r\n");
      out.write("			if(result){\r\n");
      out.write("				\r\n");
      out.write("			} else {\r\n");
      out.write("				return ;\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("			//alert(\"boardNum :\" + boardNum);\r\n");
      out.write("			\r\n");
      out.write("			$j.ajax({\r\n");
      out.write("				url : \"/board/boardDeleteAction.do\",\r\n");
      out.write("				type:\"GET\",\r\n");
      out.write("				data : {boardNum: boardNum,boardType: boardType },\r\n");
      out.write("				success:function(data){\r\n");
      out.write("					\r\n");
      out.write("					alert(\"삭제완료\");\r\n");
      out.write("					\r\n");
      out.write("					alert(\"메세지:\"+data.success);\r\n");
      out.write("					\r\n");
      out.write("					location.reload();\r\n");
      out.write("					\r\n");
      out.write("				}\r\n");
      out.write("				, error: function(){\r\n");
      out.write("					alert(\"삭제 실패\");\r\n");
      out.write("				}\r\n");
      out.write("		\r\n");
      out.write("			});\r\n");
      out.write("			\r\n");
      out.write("		});\r\n");
      out.write("	\r\n");
      out.write("	});\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<table align=\"center\">\r\n");
      out.write("	<tr bgcolor=\"\">\r\n");
      out.write("		 \r\n");
      out.write("		<td width=\"\" style=\"text-align: left;\">\r\n");
      out.write("		");
      if (_jspx_meth_c_005fchoose_005f0(_jspx_page_context))
        return;
      out.write("	\r\n");
      out.write("			<span id=\"totalCnt\" style=\"float: right;\">\r\n");
      out.write("			total : ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${totalCnt}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\r\n");
      out.write("			</span>\r\n");
      out.write("		</td>\r\n");
      out.write("	\r\n");
      out.write("	</tr>\r\n");
      out.write("	<tr bgcolor=\"\">\r\n");
      out.write("		<td>\r\n");
      out.write("			<table id=\"boardTable\" style=\"width: 100%;\" border = \"1\">\r\n");
      out.write("				<tr id=\"tableHeader\">\r\n");
      out.write("					<td width=\"80\" align=\"center\">\r\n");
      out.write("						Type\r\n");
      out.write("					</td>\r\n");
      out.write("					<td width=\"40\" align=\"center\">\r\n");
      out.write("						No\r\n");
      out.write("					</td>\r\n");
      out.write("					<td width=\"300\" align=\"center\">\r\n");
      out.write("						Title\r\n");
      out.write("					</td>\r\n");
      out.write("					<td width=\"75\" align=\"center\">\r\n");
      out.write("						\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				");
      if (_jspx_meth_c_005fforEach_005f0(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("			</table>\r\n");
      out.write("		</td>\r\n");
      out.write("	</tr>\r\n");
      out.write("	\r\n");
      out.write("	<tr>\r\n");
      out.write("		<td style=\"text-align: right;\">\r\n");
      out.write("\r\n");
      out.write("			<a href =\"/board/boardWrite.do\">글쓰기</a>\r\n");
      out.write("			\r\n");
      out.write("			");
      if (_jspx_meth_c_005fchoose_005f1(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("		</td>\r\n");
      out.write("	</tr>\r\n");
      out.write("	\r\n");
      out.write("	<tr id=\"codeNameList\"bgcolor=\"\">\r\n");
      out.write("		 \r\n");
      out.write("		<td style=\"text-align: left;\">\r\n");
      out.write("			<!--  <form action = \"/board/boardList.do\" method=\"get\">-->\r\n");
      out.write("				<label><input type=\"checkbox\" id=\"allCheck\" class=\"ck-all\"/>전체</label>\r\n");
      out.write("				");
      if (_jspx_meth_c_005fforEach_005f1(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("				<button id=\"searchBtn\">조회</button>\r\n");
      out.write("				<!-- <button type=\"submit\" id=\"searchBtn\">조회</button>-->\r\n");
      out.write("				\r\n");
      out.write("			<!--  </form>	-->		\r\n");
      out.write("		</td>\r\n");
      out.write("		\r\n");
      out.write("	</tr>\r\n");
      out.write("</table>	\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fchoose_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:choose
    org.apache.taglibs.standard.tag.common.core.ChooseTag _jspx_th_c_005fchoose_005f0 = (org.apache.taglibs.standard.tag.common.core.ChooseTag) _005fjspx_005ftagPool_005fc_005fchoose.get(org.apache.taglibs.standard.tag.common.core.ChooseTag.class);
    boolean _jspx_th_c_005fchoose_005f0_reused = false;
    try {
      _jspx_th_c_005fchoose_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fchoose_005f0.setParent(null);
      int _jspx_eval_c_005fchoose_005f0 = _jspx_th_c_005fchoose_005f0.doStartTag();
      if (_jspx_eval_c_005fchoose_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\r\n");
          out.write("			");
          if (_jspx_meth_c_005fwhen_005f0(_jspx_th_c_005fchoose_005f0, _jspx_page_context))
            return true;
          out.write("\r\n");
          out.write("			");
          if (_jspx_meth_c_005fotherwise_005f0(_jspx_th_c_005fchoose_005f0, _jspx_page_context))
            return true;
          out.write("\r\n");
          out.write("		");
          int evalDoAfterBody = _jspx_th_c_005fchoose_005f0.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fchoose_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fchoose.reuse(_jspx_th_c_005fchoose_005f0);
      _jspx_th_c_005fchoose_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fchoose_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fchoose_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fwhen_005f0(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fchoose_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:when
    org.apache.taglibs.standard.tag.rt.core.WhenTag _jspx_th_c_005fwhen_005f0 = (org.apache.taglibs.standard.tag.rt.core.WhenTag) _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.WhenTag.class);
    boolean _jspx_th_c_005fwhen_005f0_reused = false;
    try {
      _jspx_th_c_005fwhen_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fwhen_005f0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fchoose_005f0);
      // /WEB-INF/views/board/boardList.jsp(316,3) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fwhen_005f0.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${not empty userId }", boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
      int _jspx_eval_c_005fwhen_005f0 = _jspx_th_c_005fwhen_005f0.doStartTag();
      if (_jspx_eval_c_005fwhen_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\r\n");
          out.write("				");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${userName}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("님\r\n");
          out.write("			");
          int evalDoAfterBody = _jspx_th_c_005fwhen_005f0.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fwhen_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.reuse(_jspx_th_c_005fwhen_005f0);
      _jspx_th_c_005fwhen_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fwhen_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fwhen_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fotherwise_005f0(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fchoose_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:otherwise
    org.apache.taglibs.standard.tag.common.core.OtherwiseTag _jspx_th_c_005fotherwise_005f0 = (org.apache.taglibs.standard.tag.common.core.OtherwiseTag) _005fjspx_005ftagPool_005fc_005fotherwise.get(org.apache.taglibs.standard.tag.common.core.OtherwiseTag.class);
    boolean _jspx_th_c_005fotherwise_005f0_reused = false;
    try {
      _jspx_th_c_005fotherwise_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fotherwise_005f0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fchoose_005f0);
      int _jspx_eval_c_005fotherwise_005f0 = _jspx_th_c_005fotherwise_005f0.doStartTag();
      if (_jspx_eval_c_005fotherwise_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\r\n");
          out.write("				<a href=\"/board/loginPage.do\">login</a>\r\n");
          out.write("				<a href=\"/board/joinPage.do\">join</a>\r\n");
          out.write("			");
          int evalDoAfterBody = _jspx_th_c_005fotherwise_005f0.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fotherwise_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fotherwise.reuse(_jspx_th_c_005fotherwise_005f0);
      _jspx_th_c_005fotherwise_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fotherwise_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fotherwise_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fforEach_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:forEach
    org.apache.taglibs.standard.tag.rt.core.ForEachTag _jspx_th_c_005fforEach_005f0 = (org.apache.taglibs.standard.tag.rt.core.ForEachTag) _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.get(org.apache.taglibs.standard.tag.rt.core.ForEachTag.class);
    boolean _jspx_th_c_005fforEach_005f0_reused = false;
    try {
      _jspx_th_c_005fforEach_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fforEach_005f0.setParent(null);
      // /WEB-INF/views/board/boardList.jsp(347,4) name = items type = javax.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f0.setItems(new org.apache.jasper.el.JspValueExpression("/WEB-INF/views/board/boardList.jsp(347,4) '${boardList}'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"${boardList}",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
      // /WEB-INF/views/board/boardList.jsp(347,4) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f0.setVar("item");
      int[] _jspx_push_body_count_c_005fforEach_005f0 = new int[] { 0 };
      try {
        int _jspx_eval_c_005fforEach_005f0 = _jspx_th_c_005fforEach_005f0.doStartTag();
        if (_jspx_eval_c_005fforEach_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
          do {
            out.write("\r\n");
            out.write("					<tr id=\"boardTableTr\">\r\n");
            out.write("						<td align=\"center\">\r\n");
            out.write("							");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${item.codeName}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("\r\n");
            out.write("						</td>\r\n");
            out.write("						<td>\r\n");
            out.write("							");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${item.boardNum}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("\r\n");
            out.write("						</td>\r\n");
            out.write("						<td>\r\n");
            out.write("							<a href = \"/board/");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${item.boardType}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write('/');
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${item.boardNum}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("/boardView.do?pageNo=");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageNo}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write('"');
            out.write('>');
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${item.boardTitle}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("</a>\r\n");
            out.write("						</td>\r\n");
            out.write("						<td>\r\n");
            out.write("							<button class=\"deleteBtn\" data-board-num=\"");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${item.boardNum }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("\" data-board-type=\"");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${item.boardType}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("\">삭제 버튼</button>\r\n");
            out.write("						</td>\r\n");
            out.write("					</tr>	\r\n");
            out.write("				");
            int evalDoAfterBody = _jspx_th_c_005fforEach_005f0.doAfterBody();
            if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
              break;
          } while (true);
        }
        if (_jspx_th_c_005fforEach_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return true;
        }
      } catch (java.lang.Throwable _jspx_exception) {
        while (_jspx_push_body_count_c_005fforEach_005f0[0]-- > 0)
          out = _jspx_page_context.popBody();
        _jspx_th_c_005fforEach_005f0.doCatch(_jspx_exception);
      } finally {
        _jspx_th_c_005fforEach_005f0.doFinally();
      }
      _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.reuse(_jspx_th_c_005fforEach_005f0);
      _jspx_th_c_005fforEach_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fforEach_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fforEach_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fchoose_005f1(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:choose
    org.apache.taglibs.standard.tag.common.core.ChooseTag _jspx_th_c_005fchoose_005f1 = (org.apache.taglibs.standard.tag.common.core.ChooseTag) _005fjspx_005ftagPool_005fc_005fchoose.get(org.apache.taglibs.standard.tag.common.core.ChooseTag.class);
    boolean _jspx_th_c_005fchoose_005f1_reused = false;
    try {
      _jspx_th_c_005fchoose_005f1.setPageContext(_jspx_page_context);
      _jspx_th_c_005fchoose_005f1.setParent(null);
      int _jspx_eval_c_005fchoose_005f1 = _jspx_th_c_005fchoose_005f1.doStartTag();
      if (_jspx_eval_c_005fchoose_005f1 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\r\n");
          out.write("				");
          if (_jspx_meth_c_005fwhen_005f1(_jspx_th_c_005fchoose_005f1, _jspx_page_context))
            return true;
          out.write("\r\n");
          out.write("				");
          if (_jspx_meth_c_005fotherwise_005f1(_jspx_th_c_005fchoose_005f1, _jspx_page_context))
            return true;
          out.write("\r\n");
          out.write("			");
          int evalDoAfterBody = _jspx_th_c_005fchoose_005f1.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fchoose_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fchoose.reuse(_jspx_th_c_005fchoose_005f1);
      _jspx_th_c_005fchoose_005f1_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fchoose_005f1, _jsp_getInstanceManager(), _jspx_th_c_005fchoose_005f1_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fwhen_005f1(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fchoose_005f1, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:when
    org.apache.taglibs.standard.tag.rt.core.WhenTag _jspx_th_c_005fwhen_005f1 = (org.apache.taglibs.standard.tag.rt.core.WhenTag) _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.WhenTag.class);
    boolean _jspx_th_c_005fwhen_005f1_reused = false;
    try {
      _jspx_th_c_005fwhen_005f1.setPageContext(_jspx_page_context);
      _jspx_th_c_005fwhen_005f1.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fchoose_005f1);
      // /WEB-INF/views/board/boardList.jsp(373,4) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fwhen_005f1.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${not empty userId }", boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
      int _jspx_eval_c_005fwhen_005f1 = _jspx_th_c_005fwhen_005f1.doStartTag();
      if (_jspx_eval_c_005fwhen_005f1 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\r\n");
          out.write("					<a href=\"/board/logoutAction.do\">로그아웃</a>\r\n");
          out.write("				");
          int evalDoAfterBody = _jspx_th_c_005fwhen_005f1.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fwhen_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.reuse(_jspx_th_c_005fwhen_005f1);
      _jspx_th_c_005fwhen_005f1_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fwhen_005f1, _jsp_getInstanceManager(), _jspx_th_c_005fwhen_005f1_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fotherwise_005f1(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fchoose_005f1, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:otherwise
    org.apache.taglibs.standard.tag.common.core.OtherwiseTag _jspx_th_c_005fotherwise_005f1 = (org.apache.taglibs.standard.tag.common.core.OtherwiseTag) _005fjspx_005ftagPool_005fc_005fotherwise.get(org.apache.taglibs.standard.tag.common.core.OtherwiseTag.class);
    boolean _jspx_th_c_005fotherwise_005f1_reused = false;
    try {
      _jspx_th_c_005fotherwise_005f1.setPageContext(_jspx_page_context);
      _jspx_th_c_005fotherwise_005f1.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fchoose_005f1);
      int _jspx_eval_c_005fotherwise_005f1 = _jspx_th_c_005fotherwise_005f1.doStartTag();
      if (_jspx_eval_c_005fotherwise_005f1 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\r\n");
          out.write("					\r\n");
          out.write("				");
          int evalDoAfterBody = _jspx_th_c_005fotherwise_005f1.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fotherwise_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fotherwise.reuse(_jspx_th_c_005fotherwise_005f1);
      _jspx_th_c_005fotherwise_005f1_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fotherwise_005f1, _jsp_getInstanceManager(), _jspx_th_c_005fotherwise_005f1_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fforEach_005f1(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:forEach
    org.apache.taglibs.standard.tag.rt.core.ForEachTag _jspx_th_c_005fforEach_005f1 = (org.apache.taglibs.standard.tag.rt.core.ForEachTag) _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.get(org.apache.taglibs.standard.tag.rt.core.ForEachTag.class);
    boolean _jspx_th_c_005fforEach_005f1_reused = false;
    try {
      _jspx_th_c_005fforEach_005f1.setPageContext(_jspx_page_context);
      _jspx_th_c_005fforEach_005f1.setParent(null);
      // /WEB-INF/views/board/boardList.jsp(388,4) name = items type = javax.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f1.setItems(new org.apache.jasper.el.JspValueExpression("/WEB-INF/views/board/boardList.jsp(388,4) '${codeNameList}'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"${codeNameList}",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
      // /WEB-INF/views/board/boardList.jsp(388,4) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f1.setVar("list");
      int[] _jspx_push_body_count_c_005fforEach_005f1 = new int[] { 0 };
      try {
        int _jspx_eval_c_005fforEach_005f1 = _jspx_th_c_005fforEach_005f1.doStartTag();
        if (_jspx_eval_c_005fforEach_005f1 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
          do {
            out.write("\r\n");
            out.write("				");
            if (_jspx_meth_c_005fchoose_005f2(_jspx_th_c_005fforEach_005f1, _jspx_page_context, _jspx_push_body_count_c_005fforEach_005f1))
              return true;
            out.write("		\r\n");
            out.write("				");
            int evalDoAfterBody = _jspx_th_c_005fforEach_005f1.doAfterBody();
            if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
              break;
          } while (true);
        }
        if (_jspx_th_c_005fforEach_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return true;
        }
      } catch (java.lang.Throwable _jspx_exception) {
        while (_jspx_push_body_count_c_005fforEach_005f1[0]-- > 0)
          out = _jspx_page_context.popBody();
        _jspx_th_c_005fforEach_005f1.doCatch(_jspx_exception);
      } finally {
        _jspx_th_c_005fforEach_005f1.doFinally();
      }
      _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.reuse(_jspx_th_c_005fforEach_005f1);
      _jspx_th_c_005fforEach_005f1_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fforEach_005f1, _jsp_getInstanceManager(), _jspx_th_c_005fforEach_005f1_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fchoose_005f2(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fforEach_005f1, javax.servlet.jsp.PageContext _jspx_page_context, int[] _jspx_push_body_count_c_005fforEach_005f1)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:choose
    org.apache.taglibs.standard.tag.common.core.ChooseTag _jspx_th_c_005fchoose_005f2 = (org.apache.taglibs.standard.tag.common.core.ChooseTag) _005fjspx_005ftagPool_005fc_005fchoose.get(org.apache.taglibs.standard.tag.common.core.ChooseTag.class);
    boolean _jspx_th_c_005fchoose_005f2_reused = false;
    try {
      _jspx_th_c_005fchoose_005f2.setPageContext(_jspx_page_context);
      _jspx_th_c_005fchoose_005f2.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fforEach_005f1);
      int _jspx_eval_c_005fchoose_005f2 = _jspx_th_c_005fchoose_005f2.doStartTag();
      if (_jspx_eval_c_005fchoose_005f2 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\r\n");
          out.write("					");
          if (_jspx_meth_c_005fwhen_005f2(_jspx_th_c_005fchoose_005f2, _jspx_page_context, _jspx_push_body_count_c_005fforEach_005f1))
            return true;
          out.write("\r\n");
          out.write("				");
          int evalDoAfterBody = _jspx_th_c_005fchoose_005f2.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fchoose_005f2.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fchoose.reuse(_jspx_th_c_005fchoose_005f2);
      _jspx_th_c_005fchoose_005f2_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fchoose_005f2, _jsp_getInstanceManager(), _jspx_th_c_005fchoose_005f2_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fwhen_005f2(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fchoose_005f2, javax.servlet.jsp.PageContext _jspx_page_context, int[] _jspx_push_body_count_c_005fforEach_005f1)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:when
    org.apache.taglibs.standard.tag.rt.core.WhenTag _jspx_th_c_005fwhen_005f2 = (org.apache.taglibs.standard.tag.rt.core.WhenTag) _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.WhenTag.class);
    boolean _jspx_th_c_005fwhen_005f2_reused = false;
    try {
      _jspx_th_c_005fwhen_005f2.setPageContext(_jspx_page_context);
      _jspx_th_c_005fwhen_005f2.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fchoose_005f2);
      // /WEB-INF/views/board/boardList.jsp(390,5) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fwhen_005f2.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${list.codeType eq 'menu' }", boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
      int _jspx_eval_c_005fwhen_005f2 = _jspx_th_c_005fwhen_005f2.doStartTag();
      if (_jspx_eval_c_005fwhen_005f2 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\r\n");
          out.write("					<label id=\"checkboxlist\"><input type=\"checkbox\" id=\"");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${list.codeName}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("\" class=\"ck\" name=\"boardTypeList\" value=\"");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${list.codeId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("\"/>\r\n");
          out.write("							");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${list.codeName }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write(" \r\n");
          out.write("					</label>\r\n");
          out.write("					");
          int evalDoAfterBody = _jspx_th_c_005fwhen_005f2.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fwhen_005f2.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.reuse(_jspx_th_c_005fwhen_005f2);
      _jspx_th_c_005fwhen_005f2_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fwhen_005f2, _jsp_getInstanceManager(), _jspx_th_c_005fwhen_005f2_reused);
    }
    return false;
  }
}
