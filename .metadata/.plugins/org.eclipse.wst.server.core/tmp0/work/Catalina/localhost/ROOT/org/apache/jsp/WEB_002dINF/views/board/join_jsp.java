/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.71
 * Generated at: 2024-10-11 04:20:44 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.board;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class join_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(7);
    _jspx_dependants.put("jar:file:/D:/shlim/springBoard/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/springBoard/WEB-INF/lib/jstl-1.2.jar!/META-INF/fn.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("jar:file:/D:/shlim/springBoard/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/springBoard/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("jar:file:/D:/shlim/springBoard/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/springBoard/WEB-INF/lib/spring-webmvc-3.1.1.RELEASE.jar!/META-INF/spring.tld", Long.valueOf(1329370132000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1727679338000L));
    _jspx_dependants.put("/WEB-INF/lib/spring-webmvc-3.1.1.RELEASE.jar", Long.valueOf(1727679338000L));
    _jspx_dependants.put("jar:file:/D:/shlim/springBoard/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/springBoard/WEB-INF/lib/jstl-1.2.jar!/META-INF/fmt.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/views/common/common.jsp", Long.valueOf(1728547642000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fchoose;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fchoose = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.release();
    _005fjspx_005ftagPool_005fc_005fchoose.release();
    _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  \r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title></title>\r\n");
      out.write("</head>\r\n");
      out.write("<script src=\"/resources/js/jquery-1.10.2.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("	var $j = jQuery.noConflict();\r\n");
      out.write("</script>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
      out.write("    \r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title>join</title>\r\n");
      out.write("</head>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("	\r\n");
      out.write("	$j(document).ready(function(){\r\n");
      out.write("		\r\n");
      out.write("		var isChecked = false;\r\n");
      out.write("		\r\n");
      out.write("		var isDuplicateId = true;//id중복여부	중복이되야 진행안되니 중복되는걸 기본값	\r\n");
      out.write("		//유효성 검사 \r\n");
      out.write("		\r\n");
      out.write("		//focus\r\n");
      out.write("		$j(\"#idInput\").focus()		\r\n");
      out.write("			\r\n");
      out.write("		//중복아이디 검사하고 교체시 바로 중복됩니다로 나오게 하기\r\n");
      out.write("		$j(\"#idInput\").on(\"input\", function(){\r\n");
      out.write("			//중복 관련된 상태 초기화\r\n");
      out.write("			isChecked = false;\r\n");
      out.write("			isDuplicateId = true;\r\n");
      out.write("			\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("		$j(\"#duplicateBtn\").on(\"click\", function(event){\r\n");
      out.write("			\r\n");
      out.write("			event.preventDefault();\r\n");
      out.write("			\r\n");
      out.write("			let id = $j(\"#idInput\").val();\r\n");
      out.write("			\r\n");
      out.write("			if(id == \"\"){\r\n");
      out.write("				alert(\"아이디를 입력하세요.\");\r\n");
      out.write("				$j(\"#idInput\").focus()	\r\n");
      out.write("				return ;\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("			//밸류Y값 일때 중복입니다. d-none 없애기\r\n");
      out.write("			//그외일때 사용가능한 아이디입니다. d-none 없애기 \r\n");
      out.write("			\r\n");
      out.write("			$j.ajax({\r\n");
      out.write("				url : \"/board/isduplicateId.do\",\r\n");
      out.write("			    dataType: \"json\",\r\n");
      out.write("			    type: \"GET\",\r\n");
      out.write("			    data : {userId: id},\r\n");
      out.write("				success: function(data, textStatus, jqxHR){\r\n");
      out.write("					isChecked = true;//체크 한거니 true로 변경\r\n");
      out.write("					isDuplicateId = data.success;//리스폰스 받은 밸류값에 따라 \r\n");
      out.write("					\r\n");
      out.write("					if(isDuplicateId == \"Y\"){\r\n");
      out.write("						//$j(\"#duplicateYes\").removeClass(\"d-none\");\r\n");
      out.write("						//$j(\"#duplicateNo\").addClass(\"d-none\");\r\n");
      out.write("						alert(\"isDuplicateId: \" + isDuplicateId);\r\n");
      out.write("						alert(\"중복아이디 입니다.\");\r\n");
      out.write("						$j(\"#idInput\").val(\"\");//초기화\r\n");
      out.write("						$j(\"#idInput\").focus()//focus\r\n");
      out.write("					} else {\r\n");
      out.write("						//$j(\"#duplicateNo\").removeClass(\"d-none\");\r\n");
      out.write("						//$j(\"#duplicateYes\").addClass(\"d-none\");\r\n");
      out.write("						alert(\"isDuplicateId: \" + isDuplicateId);\r\n");
      out.write("						alert(\"사용할수 있는 아이디 입니다.\");\r\n");
      out.write("					}\r\n");
      out.write("				\r\n");
      out.write("					\r\n");
      out.write("				}\r\n");
      out.write("				, error: function(data, textStatus, jqxHR){\r\n");
      out.write("					alert(\"중복확인 에러\");\r\n");
      out.write("				}\r\n");
      out.write("			});\r\n");
      out.write("			\r\n");
      out.write("		});\r\n");
      out.write("	\r\n");
      out.write("		$j(\"#joinBtn\").on(\"click\", function(event){\r\n");
      out.write("			\r\n");
      out.write("			event.preventDefault();\r\n");
      out.write("	\r\n");
      out.write("			var $frm = $j('.joinForm :input');\r\n");
      out.write("			var param = $frm.serialize();\r\n");
      out.write("			//alert(\"frm\" + $frm);\r\n");
      out.write("			//alert(\"param\" + param);\r\n");
      out.write("			\r\n");
      out.write("			let id = $j(\"#idInput\").val();\r\n");
      out.write("			let pw = $j(\"#pwInput\").val();\r\n");
      out.write("			let pwConfirm = $j(\"#pwConfirmInput\").val();\r\n");
      out.write("			let name = $j(\"#nameInput\").val();\r\n");
      out.write("			let phoneInput1 = $j(\"#phoneInput1\").val();\r\n");
      out.write("			let phoneInput2 = $j(\"#phoneInput2\").val();\r\n");
      out.write("			let phoneInput3 = $j(\"#phoneInput3\").val();	\r\n");
      out.write("			let postNo = $j(\"#noInput\").val();\r\n");
      out.write("			\r\n");
      out.write("			// 한글, 영어, 숫자, 특수문자 구분 정규식 모음\r\n");
      out.write("			let checkNum = /[0-9]/;\r\n");
      out.write("			let checkEng = /[a-zA-Z]/;\r\n");
      out.write("			let checkSpc = /[~!@#$%^&*()_+|<>?:{}.,\\/]/;\r\n");
      out.write("			let checkKor = /[ㄱ-ㅎ|ㅏ-ㅣ|가-힣]/;\r\n");
      out.write("			//alert(\"name\" + name);\r\n");
      out.write("			// 반복문 \r\n");
      out.write("			if(id == \"\"){\r\n");
      out.write("				alert(\"아이디를 입력하세요.\");\r\n");
      out.write("				$j(\"#idInput\").focus()\r\n");
      out.write("				return ;\r\n");
      out.write("			}\r\n");
      out.write("			if(id.length > 15){\r\n");
      out.write("				alert(\"아이디가 15자 이하여야 합니다.\")\r\n");
      out.write("				$j(\"#idInput\").focus()\r\n");
      out.write("				return ;\r\n");
      out.write("			}\r\n");
      out.write("	\r\n");
      out.write("			if(checkSpc.test(id)||checkKor.test(id)){\r\n");
      out.write("				alert(\"아이디에 영문자와 숫자만 들어가야 합니다.\");\r\n");
      out.write("				$j(\"#idInput\").focus()\r\n");
      out.write("				$j(\"#idInput\").val(\"\");\r\n");
      out.write("				return ;\r\n");
      out.write("			}		\r\n");
      out.write("\r\n");
      out.write("			if(pw == \"\"){\r\n");
      out.write("				alert(\"비밀번호를 입력하세요.\");\r\n");
      out.write("				$j(\"#pwInput\").focus()\r\n");
      out.write("				return ;\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("			if(pw.length < 6 || pw.length > 12){				\r\n");
      out.write("				alert(\"비밀번호길이를 6~12자로 해주세요\");\r\n");
      out.write("				$j(\"#pwInput\").focus()\r\n");
      out.write("				return ;\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("			if(pwConfirm == \"\"){\r\n");
      out.write("				alert(\"비밀번호확인을 입력하세요.\");\r\n");
      out.write("				$j(\"#pwConfirmInput\").focus()\r\n");
      out.write("				return ;\r\n");
      out.write("			}\r\n");
      out.write("			if(pw != pwConfirm){\r\n");
      out.write("				alert(\"비밀번호가 일치하지 않습니다.\");\r\n");
      out.write("				$j(\"#pwConfirmInput\").focus()\r\n");
      out.write("				return ;\r\n");
      out.write("			}\r\n");
      out.write("			if(name == \"\"){\r\n");
      out.write("				alert(\"이름을 입력하세요.\");\r\n");
      out.write("				$j(\"#nameInput\").focus()\r\n");
      out.write("				return ;\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("\r\n");
      out.write("			if(checkEng.test(name)|| checkSpc.test(name)|| checkNum.test(name)){\r\n");
      out.write("				alert(\"이름에 한글만 포함되어야 합니다.\");\r\n");
      out.write("				$j(\"#nameInput\").val(\"\");\r\n");
      out.write("				$j(\"#nameInput\").focus()\r\n");
      out.write("				return ;\r\n");
      out.write("			}\r\n");
      out.write("		\r\n");
      out.write("			\r\n");
      out.write("			if(phoneInput1 == \"\"){\r\n");
      out.write("				alert(\"핸드폰 번호 앞자리를 입력하세요.\");\r\n");
      out.write("				return ;\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("			if(phoneInput2.length != 4){\r\n");
      out.write("				alert(\"핸드폰 번호 가운데자리 4자리로 입력하세요.\");\r\n");
      out.write("				$j(\"#phoneInput2\").focus()\r\n");
      out.write("				return ;\r\n");
      out.write("			}\r\n");
      out.write("			if(phoneInput3.length != 4){\r\n");
      out.write("				alert(\"핸드폰 번호 마지막자리 4자리로 입력하세요.\");\r\n");
      out.write("				$j(\"#phoneInput3\").focus()\r\n");
      out.write("				return ;\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("\r\n");
      out.write("			if(checkEng.test(phoneInput2) || checkSpc.test(phoneInput2) || checkKor.test(phoneInput2)){\r\n");
      out.write("				alert(\"전화번호에 숫자만 포함되어야 합니다.\");\r\n");
      out.write("				$j(\"#phoneInput2\").val(\"\");\r\n");
      out.write("				$j(\"#phoneInput2\").focus()\r\n");
      out.write("				return ;\r\n");
      out.write("			}\r\n");
      out.write("\r\n");
      out.write("			if(checkEng.test(phoneInput3) || checkSpc.test(phoneInput3) || checkKor.test(phoneInput3)){\r\n");
      out.write("				alert(\"전화번호에 숫자만 포함되어야 합니다.\");\r\n");
      out.write("				$j(\"#phoneInput3\").val(\"\");\r\n");
      out.write("				$j(\"#phoneInput3\").focus()\r\n");
      out.write("				return ;\r\n");
      out.write("			}\r\n");
      out.write("\r\n");
      out.write("			\r\n");
      out.write("			if(postNo !='' && !postNo.includes(\"-\") ){\r\n");
      out.write("				alert(\"postNo에 '-'이 포함되어야 합니다.\");\r\n");
      out.write("				$j(\"#noInput\").focus()\r\n");
      out.write("				return ;\r\n");
      out.write("			}\r\n");
      out.write("			/*\r\n");
      out.write("			if($j(\"#postNo\").val().length() > 8){\r\n");
      out.write("				alert(\"postNo 8글자 이하로 입력하세요.\");\r\n");
      out.write("				return ;\r\n");
      out.write("			}*/\r\n");
      out.write("			\r\n");
      out.write("			if(!isChecked) {\r\n");
      out.write("				alert(\"중복체크를 진행해주세요.\");\r\n");
      out.write("				$j(\"#idInput\").focus()\r\n");
      out.write("				return ;\r\n");
      out.write("			}\r\n");
      out.write("					\r\n");
      out.write("			$j.ajax({\r\n");
      out.write("				url : \"/board/joinAction.do\",\r\n");
      out.write("			    dataType: \"json\",\r\n");
      out.write("			    type: \"POST\",\r\n");
      out.write("			    data : param,\r\n");
      out.write("				success: function(data, textStatus, jqXHR)\r\n");
      out.write("				{\r\n");
      out.write("					\r\n");
      out.write("					alert(\"회원가입 성공\");\r\n");
      out.write("					\r\n");
      out.write("					alert(\"메시지:\"+data.success);\r\n");
      out.write("					\r\n");
      out.write("					location.href =\"/board/boardList.do\";\r\n");
      out.write("				},\r\n");
      out.write("				error: function(jqXHR, textStatus, errorThrown)\r\n");
      out.write("				{\r\n");
      out.write("					alert(\"실패\");\r\n");
      out.write("					//alert(\"textStatus\" + textStatus);\r\n");
      out.write("					//alert(\"errorThrown\" + errorThrown);\r\n");
      out.write("					alert(\"상태 코드:\"+ jqXHR.status);\r\n");
      out.write("					alert(\"param: \" + param);\r\n");
      out.write("				}\r\n");
      out.write("			});\r\n");
      out.write("			\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("	});\r\n");
      out.write("\r\n");
      out.write("	const checkNum = /[0-9]/;\r\n");
      out.write("	const checkEng = /[a-zA-Z]/;\r\n");
      out.write("	const checkSpc = /[~!@#$%^&*()_+|<>?:{}.,\\/]/;\r\n");
      out.write("	const checkKor = /[ㄱ-ㅎ|ㅏ-ㅣ|가-힣]/;\r\n");
      out.write("	/*\r\n");
      out.write("	//전화번호 창 숫자만입력 가능하게\r\n");
      out.write("	function onlyNumber(event){\r\n");
      out.write("		console.log(event.type, event.target.value);\r\n");
      out.write("		const input = event.target.value;	\r\n");
      out.write("			//포함됐을시에.\r\n");
      out.write("			if(checkSpc.test(input) || checkEng.test(input) || checkKor.test(input)){\r\n");
      out.write("				 event.preventDefault();  \r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("			const regexp = /\\D/g;//숫자가 아닌 모든 문자들 찾기 /\\D/g; /[^0-9]/g\r\n");
      out.write("			\r\n");
      out.write("			event.target.value = event.target.value.replace(regexp, '');\r\n");
      out.write("		}\r\n");
      out.write("\r\n");
      out.write("	//한글만 입력 가능하게\r\n");
      out.write("	function onlyKorean(event){\r\n");
      out.write("		console.log(event.type, event.target.value);\r\n");
      out.write("		const input = event.target.value;\r\n");
      out.write("\r\n");
      out.write("		\r\n");
      out.write("		if(checkEng.test(input) || checkNum.test(input) || checkSpc.test(input)){\r\n");
      out.write("			event.preventDefault();  \r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		const regexp = /[^ㄱ-ㅎ|ㅏ-ㅣ|가-힣]/g;//한글이 아닌 모든 문자를 찾기	\r\n");
      out.write("		event.target.value = event.target.value.replace(regexp, '');//나머지 문자는 공백으로 입력\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("	}\r\n");
      out.write("	//영어, 숫자만 입력 가능하게 \r\n");
      out.write("	\r\n");
      out.write("	function onlyEnglishNumber(event){\r\n");
      out.write("		console.log(event.type, event.target.value);\r\n");
      out.write("		const input = event.target.value;\r\n");
      out.write("		let cleanInput = '';\r\n");
      out.write("		const keyCode = event.target.value.charCodeAt(event.target.value.length - 1);\r\n");
      out.write("		if(checkKor.test(input) || checkSpc.test(input)){\r\n");
      out.write("			event.preventDefault();  \r\n");
      out.write("			event.target.value = input.replace(checkKor, '');\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		// 입력값을 한 글자씩 확인하면서 영어와 숫자만 남기기\r\n");
      out.write("	    for (let i = 0; i < input.length; i++) {\r\n");
      out.write("	        const char = input.substring(i, i + 1); // 한 글자씩 자르기\r\n");
      out.write("	        if (!checkSpc.test(char) && !checkKor.test(char)) {\r\n");
      out.write("	            cleanInput += char; // 영어와 숫자만 추가\r\n");
      out.write("	        }\r\n");
      out.write("	    }\r\n");
      out.write("		\r\n");
      out.write("	    const isHangul = (keyCode >= 0x1100 && keyCode <= 0x11FF) || (keyCode >= 0xAC00 && keyCode <= 0xD7A3); // 한글 자모 및 완성형\r\n");
      out.write("	    if (!isValidKey || isHangeul) {\r\n");
      out.write("		    event.preventDefault();\r\n");
      out.write("		    return false;\r\n");
      out.write("		  }\r\n");
      out.write("	    \r\n");
      out.write("		//substring 활용해보기\r\n");
      out.write("		const regexp = /[^a-zA-Z0-9]/g;//영여ㅓ, 숫자가 아닌 모든 문자 /[^a-zA-Z0-9]/g;\r\n");
      out.write("		event.target.value = cleanInput;\r\n");
      out.write("		event.target.value = event.target.value.replace(regexp, '');\r\n");
      out.write("	}*/\r\n");
      out.write("		\r\n");
      out.write("	//자동하이픈\r\n");
      out.write("	const autoHyphen = (target) => {\r\n");
      out.write("	     setTimeout(function() {\r\n");
      out.write("		      target.value = target.value\r\n");
      out.write("		     .replace(/[~!@#$%^&*()_+|<>?:{}.,\\/]/g, '')\r\n");
      out.write("		     .replace(/[a-zA-Z]/g, '')\r\n");
      out.write("		     .replace(/[ㄱ-ㅎ|ㅏ-ㅣ|가-힣]/g, '')\r\n");
      out.write("		     .replace(/^(\\d{0,3})(\\d{0,4})(\\d{0,4})$/g, \"$1-$2-$3\").replace(/(\\-{1,2})$/g, \"\");\r\n");
      out.write("		 }, 0);\r\n");
      out.write("	}\r\n");
      out.write("	//한글, 특수문자 제거 (아이디)\r\n");
      out.write("	function filterInput(input) {\r\n");
      out.write("	    setTimeout(function() {\r\n");
      out.write("	        input.value = input.value.replace(/[ㄱ-ㅎ|ㅏ-ㅣ|가-힣]/g, '')  // 한글 제거\r\n");
      out.write("	                                .replace(/[~!@#$%^&*()_+|<>?:{}.,\\/]/g, '');  // 특수문자 제거\r\n");
      out.write("	    }, 0); // 입력이 완료된 후에 한글, 특수문자를 제거\r\n");
      out.write("	}\r\n");
      out.write("	//영어, 특수문자, 숫자 제거(이름)\r\n");
      out.write("	function filterInput2(input) {\r\n");
      out.write("	    setTimeout(function() {\r\n");
      out.write("	        input.value = input.value.replace(/[a-zA-Z]/g, '')  // 영어 제거\r\n");
      out.write("	                                .replace(/[~!@#$%^&*()_+|<>?:{}.,\\/]/g, '')\r\n");
      out.write("	                                .replace(/[0-9]/g, '');  // 특수문자 제거\r\n");
      out.write("	    }, 0); // 입력이 완료된 후에 영어, 특수문자, 숫자 제거\r\n");
      out.write("	}\r\n");
      out.write("	//한글, 영어, 특수문자 제거 (전화번호)\r\n");
      out.write("	function filterInput3(input) {\r\n");
      out.write("	    setTimeout(function() {\r\n");
      out.write("	        input.value = input.value.replace(/[ㄱ-ㅎ|ㅏ-ㅣ|가-힣]/g, '')  // 한글 제거\r\n");
      out.write("	                                .replace(/[a-zA-Z]/g, '')// 영어제거\r\n");
      out.write("	                                .replace(/[~!@#$%^&*()_+|<>?:{}.,\\/]/g, '');  // 특수문자 제거\r\n");
      out.write("	    }, 0); // 입력이 완료된 후에 한글, 영어, 특수문자 제거\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("</script>\r\n");
      out.write("<body>\r\n");
      out.write("	<form class=\"joinForm\">\r\n");
      out.write("		<table align=\"center\">\r\n");
      out.write("			<tr>\r\n");
      out.write("				<td align=\"left\">\r\n");
      out.write("					<a href=\"/board/boardList.do\">List</a>\r\n");
      out.write("				</td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<td>\r\n");
      out.write("					<table border =\"1\"> \r\n");
      out.write("						<tr>\r\n");
      out.write("							<td width=\"120\" align=\"center\">\r\n");
      out.write("							id\r\n");
      out.write("							</td>\r\n");
      out.write("							<td width=\"400\">\r\n");
      out.write("								<label for=\"\"></label>\r\n");
      out.write("								<input id=\"idInput\" name=\"userId\" type=\"text\" oninput=\"filterInput(this)\" maxlength='15' size=\"12\" value=\"\"> \r\n");
      out.write("								<button id =\"duplicateBtn\">중복확인</button>\r\n");
      out.write("								<!--  \r\n");
      out.write("								<div class=\"small d-none\" id=\"duplicateYes\">중복된 아이디입니다.</div>\r\n");
      out.write("								<div class=\"small d-none\" id=\"duplicateNo\">사용 가능한 아이디입니다.</div>-->\r\n");
      out.write("							</td>\r\n");
      out.write("						</tr>\r\n");
      out.write("						<tr>\r\n");
      out.write("							<td width=\"120\" align=\"center\">\r\n");
      out.write("								pw\r\n");
      out.write("							</td>\r\n");
      out.write("							<td width=\"400\">\r\n");
      out.write("								<label for=\"\"></label>\r\n");
      out.write("								<input id =\"pwInput\" name=\"userPw\" type=\"password\" maxlength='12' size=\"12\" value=\"\"> \r\n");
      out.write("							</td>\r\n");
      out.write("						</tr>\r\n");
      out.write("						<tr>\r\n");
      out.write("							<td width=\"120\" align=\"center\">\r\n");
      out.write("								pwcheck\r\n");
      out.write("							</td>\r\n");
      out.write("							<td width=\"400\">\r\n");
      out.write("								<input id =\"pwConfirmInput\" name=\"\" type=\"password\" maxlength='12' size=\"12\" value=\"\"> \r\n");
      out.write("							</td>\r\n");
      out.write("						</tr>\r\n");
      out.write("						<tr>\r\n");
      out.write("							<td width=\"120\" align=\"center\">\r\n");
      out.write("								name\r\n");
      out.write("							</td>\r\n");
      out.write("							<td width=\"400\">\r\n");
      out.write("								<label for=\"\"></label>\r\n");
      out.write("								<input id=\"nameInput\" name=\"userName\" type=\"text\" oninput=\"filterInput2(this)\" maxlength='14' size=\"12\" value=\"\"> \r\n");
      out.write("							</td>\r\n");
      out.write("						</tr>\r\n");
      out.write("						<tr>\r\n");
      out.write("							<td width=\"120\" align=\"center\">\r\n");
      out.write("								phone\r\n");
      out.write("							</td>\r\n");
      out.write("							<td width=\"400\">\r\n");
      out.write("							\r\n");
      out.write("								<select id=\"phoneInput1\" name=\"userPhone1\" >\r\n");
      out.write("									");
      if (_jspx_meth_c_005fforEach_005f0(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("								</select>\r\n");
      out.write("								-\r\n");
      out.write("								<input id=\"phoneInput2\" name=\"userPhone2\" type=\"text\" oninput=\"filterInput3(this)\" maxlength='4' size=\"4\" value=\"\"> \r\n");
      out.write("								-\r\n");
      out.write("								<input id=\"phoneInput3\"name=\"userPhone3\" type=\"text\" oninput=\"filterInput3(this)\" maxlength='4' size=\"4\" value=\"\"> \r\n");
      out.write("							</td>\r\n");
      out.write("						</tr>\r\n");
      out.write("						<tr>\r\n");
      out.write("							<td width=\"120\" align=\"center\">\r\n");
      out.write("								postNo\r\n");
      out.write("							</td>\r\n");
      out.write("							<td width=\"400\">\r\n");
      out.write("								<input id=\"noInput\" name=\"postNo\" type=\"text\" maxlength='7' oninput=\"autoHyphen(this)\" pattern=\"010-[0-9]{3,4}\"size=\"12\" value=\"\"> \r\n");
      out.write("								\r\n");
      out.write("							</td>							\r\n");
      out.write("						</tr>\r\n");
      out.write("						<tr>\r\n");
      out.write("							<td width=\"120\" align=\"center\">\r\n");
      out.write("								address\r\n");
      out.write("							</td>\r\n");
      out.write("							<td width=\"400\">\r\n");
      out.write("								<input id=\"addressInput\"name=\"address\" type=\"text\" maxlength ='150' size=\"12\" value=\"\"> \r\n");
      out.write("							</td>\r\n");
      out.write("						</tr>\r\n");
      out.write("						<tr>\r\n");
      out.write("							<td width=\"120\" align=\"center\">\r\n");
      out.write("								company\r\n");
      out.write("							</td>\r\n");
      out.write("							<td width=\"400\">\r\n");
      out.write("								<input id=\"companyInput\" name=\"company\" type=\"text\" maxlength = '60' size=\"12\" value=\"\"> \r\n");
      out.write("							</td>\r\n");
      out.write("						</tr>\r\n");
      out.write("					\r\n");
      out.write("					</table>\r\n");
      out.write("				</td>	\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("			<td align=\"right\">\r\n");
      out.write("				<button id =\"joinBtn\">join</button>\r\n");
      out.write("			</td>\r\n");
      out.write("		</tr>	\r\n");
      out.write("		</table>\r\n");
      out.write("	</form>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fforEach_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:forEach
    org.apache.taglibs.standard.tag.rt.core.ForEachTag _jspx_th_c_005fforEach_005f0 = (org.apache.taglibs.standard.tag.rt.core.ForEachTag) _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.get(org.apache.taglibs.standard.tag.rt.core.ForEachTag.class);
    boolean _jspx_th_c_005fforEach_005f0_reused = false;
    try {
      _jspx_th_c_005fforEach_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fforEach_005f0.setParent(null);
      // /WEB-INF/views/board/join.jsp(393,9) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f0.setVar("phone");
      // /WEB-INF/views/board/join.jsp(393,9) name = items type = javax.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f0.setItems(new org.apache.jasper.el.JspValueExpression("/WEB-INF/views/board/join.jsp(393,9) '${codePhoneList}'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"${codePhoneList}",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
      int[] _jspx_push_body_count_c_005fforEach_005f0 = new int[] { 0 };
      try {
        int _jspx_eval_c_005fforEach_005f0 = _jspx_th_c_005fforEach_005f0.doStartTag();
        if (_jspx_eval_c_005fforEach_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
          do {
            out.write("\r\n");
            out.write("									");
            if (_jspx_meth_c_005fchoose_005f0(_jspx_th_c_005fforEach_005f0, _jspx_page_context, _jspx_push_body_count_c_005fforEach_005f0))
              return true;
            out.write("	\r\n");
            out.write("									");
            int evalDoAfterBody = _jspx_th_c_005fforEach_005f0.doAfterBody();
            if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
              break;
          } while (true);
        }
        if (_jspx_th_c_005fforEach_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return true;
        }
      } catch (java.lang.Throwable _jspx_exception) {
        while (_jspx_push_body_count_c_005fforEach_005f0[0]-- > 0)
          out = _jspx_page_context.popBody();
        _jspx_th_c_005fforEach_005f0.doCatch(_jspx_exception);
      } finally {
        _jspx_th_c_005fforEach_005f0.doFinally();
      }
      _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.reuse(_jspx_th_c_005fforEach_005f0);
      _jspx_th_c_005fforEach_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fforEach_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fforEach_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fchoose_005f0(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fforEach_005f0, javax.servlet.jsp.PageContext _jspx_page_context, int[] _jspx_push_body_count_c_005fforEach_005f0)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:choose
    org.apache.taglibs.standard.tag.common.core.ChooseTag _jspx_th_c_005fchoose_005f0 = (org.apache.taglibs.standard.tag.common.core.ChooseTag) _005fjspx_005ftagPool_005fc_005fchoose.get(org.apache.taglibs.standard.tag.common.core.ChooseTag.class);
    boolean _jspx_th_c_005fchoose_005f0_reused = false;
    try {
      _jspx_th_c_005fchoose_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fchoose_005f0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fforEach_005f0);
      int _jspx_eval_c_005fchoose_005f0 = _jspx_th_c_005fchoose_005f0.doStartTag();
      if (_jspx_eval_c_005fchoose_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\r\n");
          out.write("										");
          if (_jspx_meth_c_005fwhen_005f0(_jspx_th_c_005fchoose_005f0, _jspx_page_context, _jspx_push_body_count_c_005fforEach_005f0))
            return true;
          out.write("\r\n");
          out.write("									");
          int evalDoAfterBody = _jspx_th_c_005fchoose_005f0.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fchoose_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fchoose.reuse(_jspx_th_c_005fchoose_005f0);
      _jspx_th_c_005fchoose_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fchoose_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fchoose_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fwhen_005f0(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fchoose_005f0, javax.servlet.jsp.PageContext _jspx_page_context, int[] _jspx_push_body_count_c_005fforEach_005f0)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:when
    org.apache.taglibs.standard.tag.rt.core.WhenTag _jspx_th_c_005fwhen_005f0 = (org.apache.taglibs.standard.tag.rt.core.WhenTag) _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.WhenTag.class);
    boolean _jspx_th_c_005fwhen_005f0_reused = false;
    try {
      _jspx_th_c_005fwhen_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fwhen_005f0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fchoose_005f0);
      // /WEB-INF/views/board/join.jsp(395,10) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fwhen_005f0.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${phone.codeType eq 'phone' }", boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
      int _jspx_eval_c_005fwhen_005f0 = _jspx_th_c_005fwhen_005f0.doStartTag();
      if (_jspx_eval_c_005fwhen_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\r\n");
          out.write("										<option value=\"");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${phone.codeName}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write('"');
          out.write('>');
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${phone.codeName}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("</option>\r\n");
          out.write("										");
          int evalDoAfterBody = _jspx_th_c_005fwhen_005f0.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fwhen_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.reuse(_jspx_th_c_005fwhen_005f0);
      _jspx_th_c_005fwhen_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fwhen_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fwhen_005f0_reused);
    }
    return false;
  }
}
