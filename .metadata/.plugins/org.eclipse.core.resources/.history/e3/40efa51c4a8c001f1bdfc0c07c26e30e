package com.spring.recruit.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;

import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.spring.board.HomeController;
import com.spring.board.vo.UserVo;
import com.spring.common.CommonUtil;
import com.spring.recruit.service.RecruitService;
import com.spring.recruit.vo.CareerVo;
import com.spring.recruit.vo.CertificateVo;
import com.spring.recruit.vo.EducationVo;
import com.spring.recruit.vo.RecruitVo;

@Controller
public class RecruitController {
	
	@Autowired
	RecruitService recruitService;
	
	private static final Logger logger = LoggerFactory.getLogger(HomeController.class);
	
	//로그인페이지
	@RequestMapping(value = "/recruit/loginPage.do", method = RequestMethod.GET)
	public String loginPage() throws Exception{
		
		return "/recruit/login";
	}
	//로그인
	@RequestMapping(value = "/recruit/loginAction.do", method = RequestMethod.POST)
	@ResponseBody
	public String loginAction (Locale locale, RecruitVo recruitVo, HttpSession session) throws Exception{
		
		HashMap<String, String> result = new HashMap<String, String>();
		CommonUtil commonUtil = new CommonUtil();

		session.setAttribute("name", recruitVo.getName());//학력,경력, 자격증도 이처럼 저장해야함
        session.setAttribute("phone", recruitVo.getPhone());

        result.put("success", (session != null)?"Y":"N");
        System.out.println("name" + recruitVo.getName());
        System.out.println("phone" + recruitVo.getPhone());
        String callbackMsg = commonUtil.getJsonCallBackString(" ",result);     
        
		return callbackMsg;
	}
	
	//메인화면
	@RequestMapping(value = "/recruit/mainPage.do", method = RequestMethod.GET)
	public String mainPage(HttpSession session, Model model) throws Exception{
		
		//세션값 불러오기
		String name = (String) session.getAttribute("name");
        String phone = (String) session.getAttribute("phone");
        
        String educations = (String) session.getAttribute("educations");
        String careers = (String) session.getAttribute("careers");
        String certificates = (String) session.getAttribute("certificates");
        
        System.out.println("name" + name);
        System.out.println("phone" + phone);
      
        
         RecruitVo recruitVo = new RecruitVo();
         EducationVo educationVo = new EducationVo();
         CareerVo careerVo = new CareerVo();
         CertificateVo certificateVo = new CertificateVo();
//        

         // 데이터 조회
         try {
             recruitVo = recruitService.recruitSelect(name, phone);  // name과 phone으로 데이터 조회
             System.out.println("recruitVo: " + recruitVo);
             
             if(recruitVo != null){
             educationVo = recruitService.educateSelect(recruitVo.getSeq());
             System.out.println("educationVo: " + educationVo);
             
//             careerVo = recruitService.careerSelect(recruitVo.getSeq());
//             System.out.println("careerVo: " + careerVo);
             certificateVo = recruitService.certificateSelect(recruitVo.getSeq());
             System.out.println("certificateVo" + certificateVo);
             }
         } catch (Exception e) {
             e.printStackTrace();  // 오류 로그 출력
             throw new Exception("Recruit 정보 조회 중 오류 발생: " + e.getMessage(), e);
         }
   
      
         if (recruitVo == null) {
        	 model.addAttribute("phone", phone);
     		 model.addAttribute("name", name);
        	 model.addAttribute("recruit", new RecruitVo()); // 기본값으로 빈 객체를 전달
        	 
         } else {//있을때 디비값
        	 model.addAttribute("recruit", recruitVo);
         }
        
         if (educationVo == null) {//없을때 세션 값
        	 model.addAttribute("educate", new EducationVo()); // 기본값으로 빈 객체를 전달

         } else {//있을때 디비값
    	     model.addAttribute("educate", educationVo);
         }
     
         if (careerVo == null) {
        	model.addAttribute("career", new CareerVo()); // 기본값으로 빈 객체를 전달

         } else {
        	model.addAttribute("career", careerVo);
         }
         if (certificateVo == null) {
        	 model.addAttribute("certificate", new CertificateVo()); // 기본값으로 빈 객체를 전달
        
         } else {
        	 model.addAttribute("certificate", certificateVo);
         }
 
		return "/recruit/main";
	}
	
	//저장
	@RequestMapping(value = "/recruit/recruitInsertAction.do", method = RequestMethod.POST)
	@ResponseBody
	public String recruitInsertAction(Locale locale, RecruitVo recruitVo, EducationVo educationVo
								, CareerVo careerVo, CertificateVo certificateVo) throws Exception{
		
		HashMap<String, String> result = new HashMap<String, String>();
		CommonUtil commonUtil = new CommonUtil();
		
//		System.out.println("이름" +recruitVo.getName());
//		System.out.println("생일" + recruitVo.getBirth());
//		System.out.println("성별" + recruitVo.getGender());
//		System.out.println("연락처" + recruitVo.getPhone());
//		System.out.println("이메일" + recruitVo.getEmail());
//		System.out.println("주소" + recruitVo.getAddr());
//		System.out.println("주소" + recruitVo.getAddr());
//		System.out.println("희망근무지" + recruitVo.getLocation());
//		System.out.println("근무형태" + recruitVo.getWorkType());
//		System.out.println("시퀀스" + recruitVo.getSeq());
//		
		int resultCnt = recruitService.recruitInsert(recruitVo);
		
		result.put("success", (resultCnt > 0)?"Y":"N");
		
		String callbackMsg = commonUtil.getJsonCallBackString(" ",result);
		
		System.out.println("callbackMsg::"+callbackMsg);
		
		return callbackMsg;

	}
	
	//제출
		
	//학력 세션에 저장 
	@RequestMapping(value = "/recruit/addEducation.do", method = RequestMethod.POST)
	@ResponseBody
	public String addEducationAction(Locale locale, EducationVo educationVo, HttpSession session) throws Exception {
	    
		
		HashMap<String, String> result = new HashMap<String, String>();
		CommonUtil commonUtil = new CommonUtil();

		
	    // 세션에서 임시 저장된 리스트 가져오기
	    List<EducationVo> educations = (List<EducationVo>) session.getAttribute("educations");
	    if (educations == null) {
	        educations = new ArrayList<>();
	    }
	    
	    // 새로운 education 정보 추가
	    // 새로운 학력 추가
	    educations.add(educationVo);
	    
	    // 세션에 저장
	    session.setAttribute("education", educations);
	    
	    session.setAttribute("startPeriod", educationVo.getStartPeriod());
	    session.setAttribute("endPeriod", educationVo.getEndPeriod());
	    session.setAttribute("division", educationVo.getDivision());
	    session.setAttribute("schoolName", educationVo.getSchoolName());
	    session.setAttribute("location", educationVo.getLocation());
	    session.setAttribute("major", educationVo.getMajor());
	    session.setAttribute("grade", educationVo.getGrade());
	    
	    result.put("success", (session != null)?"Y":"N");

        String callbackMsg = commonUtil.getJsonCallBackString(" ",result);     
        
		return callbackMsg;
	    // 세션에 다시 저장
	    
	
	}
	
	//학력 추가
	@RequestMapping(value = "/recruit/educateInsertAction.do", method = RequestMethod.POST)
	@ResponseBody
	public String educateInsertAction(Locale locale, EducationVo educateVo) throws Exception{
		
		HashMap<String, String> result = new HashMap<String, String>();
		CommonUtil commonUtil = new CommonUtil();
		
		
		int resultCnt = recruitService.educateInsert(educateVo);
		
//		System.out.println("시작일자" + educateVo.getStartPeriod());
//		System.out.println("끝일자" + educateVo.getEndPeriod());
//		System.out.println("구분" + educateVo.getDivision());
//		System.out.println("학교" + educateVo.getSchoolName());
//		System.out.println("전공" + educateVo.getMajor());
//		System.out.println("학점" + educateVo.getGrade());
//		System.out.println("시퀀스" + educateVo.getSeq());
		
		
		result.put("success", (resultCnt > 0)?"Y":"N");
		
		String callbackMsg = commonUtil.getJsonCallBackString(" ",result);
		
		System.out.println("callbackMsg::"+callbackMsg);
	
		return callbackMsg;		
	}
	//학력 삭제
	@RequestMapping(value = "/recruit/educateDeleteAction.do", method = RequestMethod.GET)
	@ResponseBody
	public String educateDeleteAction(Locale locale, EducationVo educateVo) throws Exception{
			
		HashMap<String, String> result = new HashMap<String, String>();
		CommonUtil commonUtil = new CommonUtil();
		
		int resultCnt = recruitService.educateDelete(educateVo);
		
		result.put("success", (resultCnt > 0)?"Y":"N");
		
		String callbackMsg = commonUtil.getJsonCallBackString(" ",result);
		
		System.out.println("callbackMsg::"+callbackMsg);
		
		return callbackMsg;		
	}
	
	//경력 세션에 저장 
	@RequestMapping(value = "/recruit/addCareer.do", method = RequestMethod.POST)
	@ResponseBody
	public String addCareerAction(Locale locale, CareerVo careerVo, HttpSession session) throws Exception {
	
		HashMap<String, String> result = new HashMap<String, String>();
		CommonUtil commonUtil = new CommonUtil();
	
	    // 세션에서 임시 저장된 리스트 가져오기
	    List<CareerVo> careers = (List<CareerVo>) session.getAttribute("career");
	    if (careers == null) {
	    	careers = new ArrayList<>();
	    }
	    
	    // 새로운 career 정보 추가
	    careers.add(careerVo);
	    
	    // 세션에 저장
	    session.setAttribute("careers", careers);
	    
	    session.setAttribute("compName", careerVo.getCompName());
	    session.setAttribute("location", careerVo.getLocation());
	    session.setAttribute("startPeriod", careerVo.getStartPeriod());
	    session.setAttribute("endPeriod", careerVo.getEndPeriod());
	    session.setAttribute("task", careerVo.getTask());
	    session.setAttribute("salary", careerVo.getSalary());
	    
	    result.put("success", (session != null)?"Y":"N");

        String callbackMsg = commonUtil.getJsonCallBackString(" ",result);     
        
		return callbackMsg;
	}
	
	//경력 추가
	@RequestMapping(value = "/recruit/careerInsertAction.do", method = RequestMethod.POST , produces="application/text;charset=utf-8")
	@ResponseBody
	public String careerInsertAction(Locale locale, CareerVo careerVo) throws Exception{
		
		HashMap<String, String> result = new HashMap<String, String>();
		CommonUtil commonUtil = new CommonUtil();

		int resultCnt = recruitService.careerInsert(careerVo);
		
		System.out.println("careerVo"+careerVo);
		System.out.println("고용일자" + careerVo.getStartPeriod());
		System.out.println("퇴사일자" + careerVo.getEndPeriod());
		System.out.println("회사" + careerVo.getCompName());
		System.out.println("부서/직급/직책" + careerVo.getTask());
		System.out.println("부서/직급/직책" + careerVo.getSalary());
		System.out.println("지역" + careerVo.getLocation());
		
		result.put("success", (resultCnt > 0)?"Y":"N");
		
		String callbackMsg = commonUtil.getJsonCallBackString(" ",result);
		
		System.out.println("callbackMsg::"+callbackMsg);
	
		return callbackMsg;		
	}
	
	
	//경력 삭제
	@RequestMapping(value = "/recruit/careerDeleteAction.do", method = RequestMethod.GET)
	@ResponseBody
	public String careerDeleteAction(Locale locale, CareerVo careerVo) throws Exception{
			
		HashMap<String, String> result = new HashMap<String, String>();
		CommonUtil commonUtil = new CommonUtil();
		
		int resultCnt = recruitService.careerDelete(careerVo);
		
		result.put("success", (resultCnt > 0)?"Y":"N");
		
		String callbackMsg = commonUtil.getJsonCallBackString(" ",result);
		
		System.out.println("callbackMsg::"+callbackMsg);
		
		return callbackMsg;		
	}
	
	//자격증 세션에 저장
	@RequestMapping(value = "/recruit/addCertificate.do", method = RequestMethod.POST)
	@ResponseBody
	public String addCertificateAction(Locale locale,  CertificateVo certificateVo, HttpSession session) throws Exception {
	
		HashMap<String, String> result = new HashMap<String, String>();
		CommonUtil commonUtil = new CommonUtil();
	
	    // 세션에서 임시 저장된 리스트 가져오기
	    List<CertificateVo> certificates = (List<CertificateVo>) session.getAttribute("certificate");
	    if (certificates == null) {
	    	certificates = new ArrayList<>();
	    }
	    
	    // 새로운 career 정보 추가
	    certificates.add(certificateVo);
	    session.setAttribute("qualifiName", certificateVo.getQualifiName());
	    session.setAttribute("acquDate", certificateVo.getAcquDate());
	    session.setAttribute("organizeName", certificateVo.getOrganizeName());

	    
	    result.put("success", (session != null)?"Y":"N");

        String callbackMsg = commonUtil.getJsonCallBackString(" ",result);     
        
		return callbackMsg;
	}
	
	//자격증 추가
	@RequestMapping(value = "/recruit/certificateInsertAction.do", method = RequestMethod.POST)
	@ResponseBody
	public String certificateInsertAction(Locale locale, CertificateVo certificateVo) throws Exception{
		
		HashMap<String, String> result = new HashMap<String, String>();
		CommonUtil commonUtil = new CommonUtil();

		int resultCnt = recruitService.certificateInsert(certificateVo);
		
			System.out.println("자격증" + certificateVo.getQualifiName());
			System.out.println("취득일" + certificateVo.getAcquDate());
			System.out.println("발해청" + certificateVo.getOrganizeName());
			System.out.println("seq" + certificateVo.getSeq());


		result.put("success", (resultCnt > 0)?"Y":"N");
		
		String callbackMsg = commonUtil.getJsonCallBackString(" ",result);
		
		System.out.println("callbackMsg::"+callbackMsg);
	
		return callbackMsg;		
	}
	//자격증 삭제
	@RequestMapping(value = "/recruit/certificateDeleteAction.do", method = RequestMethod.GET)
	@ResponseBody
	public String certificateDeleteAction(Locale locale, CertificateVo certificateVo) throws Exception{
			
		HashMap<String, String> result = new HashMap<String, String>();
		CommonUtil commonUtil = new CommonUtil();
		
		int resultCnt = recruitService.certificateDelete(certificateVo);
		
		result.put("success", (resultCnt > 0)?"Y":"N");
		
		String callbackMsg = commonUtil.getJsonCallBackString(" ",result);
		
		System.out.println("callbackMsg::"+callbackMsg);
		
		return callbackMsg;		
	}

}
